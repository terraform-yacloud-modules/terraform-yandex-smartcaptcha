diff --git a/README.md b/README.md
index a3ee527..94e289c 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
-# Yandex Cloud <RESOURCE> Terraform module
+# Yandex Cloud SmartCaptcha Terraform module
 
-Terraform module which creates Yandex Cloud <RESOURCE> resources.
+Terraform module which creates Yandex Cloud SmartCaptcha resources.
 
 ## Examples
 
@@ -33,6 +33,7 @@ No modules.
 | Name | Type |
 |------|------|
 | [yandex_smartcaptcha_captcha.this](https://registry.terraform.io/providers/yandex-cloud/yandex/latest/docs/resources/smartcaptcha_captcha) | resource |
+| [yandex_client_config.client](https://registry.terraform.io/providers/yandex-cloud/yandex/latest/docs/data-sources/client_config) | data source |
 
 ## Inputs
 
@@ -42,12 +43,31 @@ No modules.
 | <a name="input_challenge_type"></a> [challenge\_type](#input\_challenge\_type) | Challenge type for the captcha | `string` | `"IMAGE_TEXT"` | no |
 | <a name="input_complexity"></a> [complexity](#input\_complexity) | Complexity level of the captcha | `string` | `"HARD"` | no |
 | <a name="input_deletion_protection"></a> [deletion\_protection](#input\_deletion\_protection) | Enable deletion protection for SmartCaptcha | `bool` | `true` | no |
+| <a name="input_folder_id"></a> [folder\_id](#input\_folder\_id) | ID of the folder to create a captcha in. If omitted, the provider folder is used | `string` | `null` | no |
 | <a name="input_name"></a> [name](#input\_name) | Name of the SmartCaptcha | `string` | `"demo-captcha-simple"` | no |
+| <a name="input_override_variant"></a> [override\_variant](#input\_override\_variant) | List of override variants for security rules | <pre>list(object({<br/>    uuid           = string<br/>    complexity     = string<br/>    pre_check_type = string<br/>    challenge_type = string<br/>    description    = optional(string)<br/>  }))</pre> | `[]` | no |
 | <a name="input_pre_check_type"></a> [pre\_check\_type](#input\_pre\_check\_type) | Pre-check type for the captcha | `string` | `"SLIDER"` | no |
+| <a name="input_security_rule"></a> [security\_rule](#input\_security\_rule) | List of security rules for the captcha | <pre>list(object({<br/>    name                  = string<br/>    priority              = number<br/>    description           = optional(string)<br/>    override_variant_uuid = string<br/>    condition = optional(object({<br/>      host = optional(object({<br/>        hosts = list(object({<br/>          exact_match = optional(string)<br/>        }))<br/>      }))<br/>      uri = optional(object({<br/>        path = optional(object({<br/>          prefix_match = optional(string)<br/>        }))<br/>        queries = optional(list(object({<br/>          key = string<br/>          value = object({<br/>            pire_regex_match     = optional(string)<br/>            pire_regex_not_match = optional(string)<br/>          })<br/>        })))<br/>      }))<br/>      headers = optional(list(object({<br/>        name = string<br/>        value = object({<br/>          pire_regex_match     = optional(string)<br/>          pire_regex_not_match = optional(string)<br/>        })<br/>      })))<br/>      source_ip = optional(object({<br/>        ip_ranges_match = optional(object({<br/>          ip_ranges = list(string)<br/>        }))<br/>        ip_ranges_not_match = optional(object({<br/>          ip_ranges = list(string)<br/>        }))<br/>        geo_ip_match = optional(object({<br/>          locations = list(string)<br/>        }))<br/>        geo_ip_not_match = optional(object({<br/>          locations = list(string)<br/>        }))<br/>      }))<br/>    }))<br/>  }))</pre> | `[]` | no |
+| <a name="input_style_json"></a> [style\_json](#input\_style\_json) | JSON with variables to define the captcha appearance | `string` | `null` | no |
+| <a name="input_turn_off_hostname_check"></a> [turn\_off\_hostname\_check](#input\_turn\_off\_hostname\_check) | Turn off hostname check | `bool` | `false` | no |
 
 ## Outputs
 
-No outputs.
+| Name | Description |
+|------|-------------|
+| <a name="output_allowed_sites"></a> [allowed\_sites](#output\_allowed\_sites) | List of allowed sites for the captcha |
+| <a name="output_challenge_type"></a> [challenge\_type](#output\_challenge\_type) | Challenge type for the captcha |
+| <a name="output_client_key"></a> [client\_key](#output\_client\_key) | Client key of the captcha |
+| <a name="output_complexity"></a> [complexity](#output\_complexity) | Complexity level of the captcha |
+| <a name="output_created_at"></a> [created\_at](#output\_created\_at) | The Captcha creation timestamp |
+| <a name="output_deletion_protection"></a> [deletion\_protection](#output\_deletion\_protection) | Whether deletion protection is enabled |
+| <a name="output_id"></a> [id](#output\_id) | ID of the SmartCaptcha |
+| <a name="output_name"></a> [name](#output\_name) | Name of the SmartCaptcha |
+| <a name="output_override_variants"></a> [override\_variants](#output\_override\_variants) | List of override variants configured for the captcha |
+| <a name="output_pre_check_type"></a> [pre\_check\_type](#output\_pre\_check\_type) | Pre-check type for the captcha |
+| <a name="output_security_rules"></a> [security\_rules](#output\_security\_rules) | List of security rules configured for the captcha |
+| <a name="output_style_json"></a> [style\_json](#output\_style\_json) | JSON with variables to define the captcha appearance |
+| <a name="output_turn_off_hostname_check"></a> [turn\_off\_hostname\_check](#output\_turn\_off\_hostname\_check) | Whether hostname check is turned off |
 <!-- END_TF_DOCS -->
 
 ## License
diff --git a/examples/minimal/outputs.tf b/examples/minimal/outputs.tf
index e69de29..263ccae 100644
--- a/examples/minimal/outputs.tf
+++ b/examples/minimal/outputs.tf
@@ -0,0 +1,19 @@
+output "captcha_id" {
+  description = "ID of the created SmartCaptcha"
+  value       = module.smartcaptcha.id
+}
+
+output "client_key" {
+  description = "Client key of the SmartCaptcha"
+  value       = module.smartcaptcha.client_key
+}
+
+output "created_at" {
+  description = "Creation timestamp of the SmartCaptcha"
+  value       = module.smartcaptcha.created_at
+}
+
+output "name" {
+  description = "Name of the SmartCaptcha"
+  value       = module.smartcaptcha.name
+}
diff --git a/main.tf b/main.tf
index a44b556..179a72b 100644
--- a/main.tf
+++ b/main.tf
@@ -1,8 +1,116 @@
 resource "yandex_smartcaptcha_captcha" "this" {
-  deletion_protection = var.deletion_protection
-  name                = var.name
-  complexity          = var.complexity
-  pre_check_type      = var.pre_check_type
-  challenge_type      = var.challenge_type
-  allowed_sites       = var.allowed_sites
+  deletion_protection     = var.deletion_protection
+  name                    = var.name
+  complexity              = var.complexity
+  pre_check_type          = var.pre_check_type
+  challenge_type          = var.challenge_type
+  folder_id               = local.folder_id
+  allowed_sites           = var.allowed_sites
+  style_json              = var.style_json
+  turn_off_hostname_check = var.turn_off_hostname_check
+
+  dynamic "security_rule" {
+    for_each = var.security_rule
+    content {
+      name                  = security_rule.value.name
+      priority              = security_rule.value.priority
+      description           = security_rule.value.description
+      override_variant_uuid = security_rule.value.override_variant_uuid
+
+      dynamic "condition" {
+        for_each = security_rule.value.condition != null ? [security_rule.value.condition] : []
+        content {
+          dynamic "host" {
+            for_each = condition.value.host != null ? [condition.value.host] : []
+            content {
+              dynamic "hosts" {
+                for_each = host.value.hosts
+                content {
+                  exact_match = hosts.value.exact_match
+                }
+              }
+            }
+          }
+
+          dynamic "uri" {
+            for_each = condition.value.uri != null ? [condition.value.uri] : []
+            content {
+              dynamic "path" {
+                for_each = uri.value.path != null ? [uri.value.path] : []
+                content {
+                  prefix_match = path.value.prefix_match
+                }
+              }
+
+              dynamic "queries" {
+                for_each = uri.value.queries != null ? uri.value.queries : []
+                content {
+                  key = queries.value.key
+                  value {
+                    pire_regex_match     = queries.value.value.pire_regex_match
+                    pire_regex_not_match = queries.value.value.pire_regex_not_match
+                  }
+                }
+              }
+            }
+          }
+
+          dynamic "headers" {
+            for_each = condition.value.headers != null ? condition.value.headers : []
+            content {
+              name = headers.value.name
+              value {
+                pire_regex_match     = headers.value.value.pire_regex_match
+                pire_regex_not_match = headers.value.value.pire_regex_not_match
+              }
+            }
+          }
+
+          dynamic "source_ip" {
+            for_each = condition.value.source_ip != null ? [condition.value.source_ip] : []
+            content {
+              dynamic "ip_ranges_match" {
+                for_each = source_ip.value.ip_ranges_match != null ? [source_ip.value.ip_ranges_match] : []
+                content {
+                  ip_ranges = ip_ranges_match.value.ip_ranges
+                }
+              }
+
+              dynamic "ip_ranges_not_match" {
+                for_each = source_ip.value.ip_ranges_not_match != null ? [source_ip.value.ip_ranges_not_match] : []
+                content {
+                  ip_ranges = ip_ranges_not_match.value.ip_ranges
+                }
+              }
+
+              dynamic "geo_ip_match" {
+                for_each = source_ip.value.geo_ip_match != null ? [source_ip.value.geo_ip_match] : []
+                content {
+                  locations = geo_ip_match.value.locations
+                }
+              }
+
+              dynamic "geo_ip_not_match" {
+                for_each = source_ip.value.geo_ip_not_match != null ? [source_ip.value.geo_ip_not_match] : []
+                content {
+                  locations = geo_ip_not_match.value.locations
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+
+  dynamic "override_variant" {
+    for_each = var.override_variant
+    content {
+      uuid           = override_variant.value.uuid
+      complexity     = override_variant.value.complexity
+      pre_check_type = override_variant.value.pre_check_type
+      challenge_type = override_variant.value.challenge_type
+      description    = override_variant.value.description
+    }
+  }
 }
diff --git a/outputs.tf b/outputs.tf
index e69de29..dd943ff 100644
--- a/outputs.tf
+++ b/outputs.tf
@@ -0,0 +1,64 @@
+output "id" {
+  description = "ID of the SmartCaptcha"
+  value       = yandex_smartcaptcha_captcha.this.id
+}
+
+output "created_at" {
+  description = "The Captcha creation timestamp"
+  value       = yandex_smartcaptcha_captcha.this.created_at
+}
+
+output "client_key" {
+  description = "Client key of the captcha"
+  value       = yandex_smartcaptcha_captcha.this.client_key
+}
+
+output "name" {
+  description = "Name of the SmartCaptcha"
+  value       = yandex_smartcaptcha_captcha.this.name
+}
+
+output "complexity" {
+  description = "Complexity level of the captcha"
+  value       = yandex_smartcaptcha_captcha.this.complexity
+}
+
+output "pre_check_type" {
+  description = "Pre-check type for the captcha"
+  value       = yandex_smartcaptcha_captcha.this.pre_check_type
+}
+
+output "challenge_type" {
+  description = "Challenge type for the captcha"
+  value       = yandex_smartcaptcha_captcha.this.challenge_type
+}
+
+output "allowed_sites" {
+  description = "List of allowed sites for the captcha"
+  value       = yandex_smartcaptcha_captcha.this.allowed_sites
+}
+
+output "style_json" {
+  description = "JSON with variables to define the captcha appearance"
+  value       = yandex_smartcaptcha_captcha.this.style_json
+}
+
+output "turn_off_hostname_check" {
+  description = "Whether hostname check is turned off"
+  value       = yandex_smartcaptcha_captcha.this.turn_off_hostname_check
+}
+
+output "deletion_protection" {
+  description = "Whether deletion protection is enabled"
+  value       = yandex_smartcaptcha_captcha.this.deletion_protection
+}
+
+output "security_rules" {
+  description = "List of security rules configured for the captcha"
+  value       = yandex_smartcaptcha_captcha.this.security_rule
+}
+
+output "override_variants" {
+  description = "List of override variants configured for the captcha"
+  value       = yandex_smartcaptcha_captcha.this.override_variant
+}
diff --git a/variables.tf b/variables.tf
index cbe1777..5d2ff29 100644
--- a/variables.tf
+++ b/variables.tf
@@ -40,8 +40,89 @@ variable "challenge_type" {
   }
 }
 
+variable "folder_id" {
+  description = "ID of the folder to create a captcha in. If omitted, the provider folder is used"
+  type        = string
+  default     = null
+}
+
 variable "allowed_sites" {
   description = "List of allowed sites for the captcha"
   type        = list(string)
   default     = []
 }
+
+variable "style_json" {
+  description = "JSON with variables to define the captcha appearance"
+  type        = string
+  default     = null
+}
+
+variable "turn_off_hostname_check" {
+  description = "Turn off hostname check"
+  type        = bool
+  default     = false
+}
+
+variable "security_rule" {
+  description = "List of security rules for the captcha"
+  type = list(object({
+    name                  = string
+    priority              = number
+    description           = optional(string)
+    override_variant_uuid = string
+    condition = optional(object({
+      host = optional(object({
+        hosts = list(object({
+          exact_match = optional(string)
+        }))
+      }))
+      uri = optional(object({
+        path = optional(object({
+          prefix_match = optional(string)
+        }))
+        queries = optional(list(object({
+          key = string
+          value = object({
+            pire_regex_match     = optional(string)
+            pire_regex_not_match = optional(string)
+          })
+        })))
+      }))
+      headers = optional(list(object({
+        name = string
+        value = object({
+          pire_regex_match     = optional(string)
+          pire_regex_not_match = optional(string)
+        })
+      })))
+      source_ip = optional(object({
+        ip_ranges_match = optional(object({
+          ip_ranges = list(string)
+        }))
+        ip_ranges_not_match = optional(object({
+          ip_ranges = list(string)
+        }))
+        geo_ip_match = optional(object({
+          locations = list(string)
+        }))
+        geo_ip_not_match = optional(object({
+          locations = list(string)
+        }))
+      }))
+    }))
+  }))
+  default = []
+}
+
+variable "override_variant" {
+  description = "List of override variants for security rules"
+  type = list(object({
+    uuid           = string
+    complexity     = string
+    pre_check_type = string
+    challenge_type = string
+    description    = optional(string)
+  }))
+  default = []
+}
